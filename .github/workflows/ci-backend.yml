name: Pipeline de CI/CD para el Backend

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

permissions:
  contents: read
  security-events: write

env:
  DOTNET_VERSION: '8.0.x'
  SNYK_SEVERITY_THRESHOLD: 'high'

jobs:
  build-and-test:
    name: Construcción y Pruebas
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false

    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar caché de NuGet
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Configurar .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restaurar dependencias de NuGet
        run: dotnet restore

      - name: Construir proyecto
        run: dotnet build --configuration Release --no-restore

      - name: Instalar y configurar herramienta de cobertura
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Ejecutar pruebas unitarias con cobertura
        run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --verbosity normal

      - name: Generar informe de cobertura
        run: reportgenerator -reports:./**/TestResults/**/coverage.cobertura.xml -targetdir:./coverage -reporttypes:Html

      - name: Subir informe de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ./coverage
      
      - name: Publicar proyecto
        run: dotnet publish --configuration Release --output ./publish --no-build

      - name: Subir el artefacto de la aplicación
        uses: actions/upload-artifact@v4
        with:
          name: net-app-publish
          path: ./publish

  scan-dependencies:
    name: Escanear Dependencias con Snyk
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 15

    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4

      - name: Configurar .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restaurar dependencias de NuGet
        run: dotnet restore

      - name: Instalar Snyk CLI
        run: npm install -g snyk

      - name: Escanear en busca de vulnerabilidades
        run: snyk test --all-projects --policy-path=.snyk --severity-threshold=${{ env.SNYK_SEVERITY_THRESHOLD }} --json-file-output=snyk-report.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Subir resultados de Snyk
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-scan-results
          path: snyk-report.json

  build-and-scan-image:
    name: Construcción y Escaneo de Imagen
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 30

    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4
      
      - name: Obtener artefacto de la aplicación
        uses: actions/download-artifact@v4
        with:
          name: net-app-publish
          path: ./publish

      - name: Verificar estructura de archivos
        run: |
          echo "Contenido del directorio:"
          ls -la
          echo "Contenido de la carpeta publish:"
          ls -la publish/
          echo "Verificando Dockerfile:"
          if [ -f "Dockerfile" ]; then
            cat Dockerfile
          else
            echo "ERROR: No se encuentra Dockerfile"
            exit 1
          fi

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Construir imagen de Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          tags: product-catalog-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          push: false

      - name: Verificar imagen construida
        run: |
          docker images
          docker image inspect product-catalog-backend:latest --format='Tamaño: {{.Size}} bytes'

      - name: Escanear imagen de Docker con Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'product-catalog-backend:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Verificar resultados de Trivy
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "Archivo SARIF generado correctamente"
            if grep -q '"level": "error"' trivy-results.sarif; then
              echo "Se encontraron vulnerabilidades críticas/altas"
              if command -v jq &> /dev/null; then
                cat trivy-results.sarif | jq '.runs[0].results[] | select(.level == "error") | .message.text'
              else
                echo "Instala jq para ver detalles específicos de las vulnerabilidades"
              fi
              exit 1
            else
              echo "No se encontraron vulnerabilidades críticas/altas"
            fi
          else
            echo "ERROR: Archivo SARIF no generado"
            exit 1
          fi

      - name: Subir resultados de escaneo
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: trivy-results.sarif

      - name: Subir resultados a GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-scan'

  # NUEVO JOB: Despliegue en Staging
  deploy-staging:
    name: Despliegue en Staging
    runs-on: ubuntu-latest
    environment: staging
    needs: build-and-scan-image
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4

      - name: Descargar artefacto de la aplicación
        uses: actions/download-artifact@v4
        with:
          name: net-app-publish
          path: ./publish

      - name: Configurar variables de entorno
        run: |
          echo "DEPLOYMENT_ENV=staging" >> $GITHUB_ENV
          echo "DB_CONNECTION=${{ secrets.STAGING_DB_CONNECTION }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.STAGING_API_KEY }}" >> $GITHUB_ENV

      - name: Verificar configuración
        run: |
          echo "Entorno de despliegue: $DEPLOYMENT_ENV"
          echo "Cadena de conexión a BD: $DB_CONNECTION"
          echo "API Key: $API_KEY"

      - name: Simular despliegue en staging
        run: |
          echo "=== INICIO DE SIMULACIÓN DE DESPLIEGUE ==="
          echo "1. Validando variables de entorno..."
          echo "2. Conectando a la base de datos..."
          echo "3. Aplicando migraciones de base de datos..."
          echo "4. Desplegando aplicación en entorno staging..."
          echo "5. Realizando pruebas de humo..."
          echo "=== DESPLIEGUE SIMULADO COMPLETADO ==="