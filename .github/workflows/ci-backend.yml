name: Pipeline de CI/CD para el Backend

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  build-and-test:
    name: Construcción y Pruebas
    runs-on: ubuntu-latest

    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4

      - name: Configurar .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependencias de NuGet
        run: dotnet restore

      - name: Construir proyecto
        run: dotnet build --configuration Release --no-restore

      - name: Instalar la herramienta de cobertura
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Ejecutar pruebas unitarias con cobertura
        run: dotnet test --collect:"XPlat Code Coverage"

      - name: Generar informe de cobertura
        run: reportgenerator -reports:./**/TestResults/**/coverage.cobertura.xml -targetdir:./coverage -reporttypes:Html

      - name: Subir informe de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: ./coverage
      
      - name: Publicar proyecto (preparar para despliegue)
        run: dotnet publish --configuration Release --output ./publish

      - name: Subir el artefacto de la aplicación
        uses: actions/upload-artifact@v4
        with:
          name: net-app-publish
          path: ./publish

  scan-dependencies:
    name: Escanear Dependencias con Snyk
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4
      - name: Configurar .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Escanear en busca de vulnerabilidades
        uses: snyk/actions/dotnet@master
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-scan-image:
    name: Construcción y Escaneo de Imagen
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Obtener código del repositorio
        uses: actions/checkout@v4
      
      - name: Obtener artefacto de la aplicación
        uses: actions/download-artifact@v4
        with:
          name: net-app-publish
          path: .
      
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Construir y escanear imagen de Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: product-catalog-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
          push: false
          
      - name: Escanear imagen de Docker con Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'product-catalog-backend:latest'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          vuln-type: 'os,library'

      - name: Subir resultados de escaneo de la imagen a GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-image-scan'

